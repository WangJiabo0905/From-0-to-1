#include <cstring>
#include <cstdlib>
#include <iostream>
using namespace std;
class String
{
	char* str;
public:
	String()                             // 默认构造函数
	{
		str = NULL;
	}
	String(const char* p)                // 带一个字符串参数的构造函数，这里的const参数就是一个字符串本身，不是一个变量，是固定的字符串
		                                  //常量指针不能修改指针所指的值。
	{
		str = new char[strlen(p) + 1];   // 申请资源
		strcpy(str, p);                  //把刚分配的内存用上。
	}
	~String()                            // 析构函数
	{
		delete[]str;                     // 归还资源
		str = NULL;                      // 一般情况下不需要这条语句。有时需要，释放内存之后，指向NULL，不悬空
	}
	int length()                         // 取字符串长度
	{ 
		return strlen(str); 
	} 
	char& char_at(int i)                 // 返回指定位置上字符的引用
	{
		if (i < 0 || i >= strlen(str))
		{
			cerr << " 超出字符串范围 !\n";//专门输出错误信息
			exit(-1);
		}
		return str[i];                    //这里是如果存在，就返回想要的位置。
	}
	const char* get_str() 
	
	{ 
		return str; 
	}                                      // 返回字符串指针，一个常量指针，不能修改指针指向的位置
	                                  
	String& copy(const char* p)           // 下面两个重载函数实现字符串复制功能
	{
		delete[]str;
		                                  // 归还原来的资源
		str = new char[strlen(p) + 1];
		                                  // 申请新的资源
		strcpy(str, p);//这行代码的作用就是将传入的字符串 p 复制到新分配的 str 所指向的内存空间中。
		               //原来的都被释放掉了，就单纯的拷贝一下p
		return *this;       
	}

	//this 是一个特殊的指针，它在类成员函数内部使用，指向调用该成员函数的当前对象。
	// 它的主要作用是帮助区分对象的成员变量和局部变量（在名字相同的情况下可以通过this->来显式指出是成员变量），
	// 或者在某些情况下返回当前对象的引用。方便再次对已经操作过得变量进行第二次操作
	//同时this本身是一个常量指针，地址不可修改
	//在成员函数中，可以用 *this 返回当前对象的引用

	//this最大的作用就是在操作一个函数后返回this，可以再次对这个函数进行操作。多次执行不同或相同的函数

	String& copy(const String& s) //这里就实现copy两个类中的str了
	{ 
		return copy(s.str);
	}
	                                      // 下面两个重载函数实现字符串拼接功能
	String& append(const char* p)
	{
		char* p1 = new char[strlen(str) + strlen(p) + 1]; // 申请新的资源
		strcpy(p1, str);//先把类内部的变量复制。
		strcat(p1, p);//然后再连接参数里面的常量指针。
		delete[]str;
		                                  // 归还原来的资源
		str = p1;//释放之后再重新确定指向，为了防止内存泄漏。
		return *this;
	}
	String& append(const String& s) //参数为一个类的参数，就是为了返回类中str的复制，和直接输入str没啥区别
	{
		return append(s.str); 
	}
	                                       // 下面两个重载函数实现字符串比较功能，和上面的复制逻辑一样
	int compare(const char* p) 
	{
		return strcmp(str, p); 
	}
	int compare(const String& s)
	{
		return strcmp(str, s.str);
	}
};





int main()
{
	String s1;
	String s2("abcdefg");
	s1.copy("xyz");
	                                        // 把 "xyz" 复制到 s1 中
	s2.append(s1);
	                                        // 在 s2 的字符串后面添加一个由 s1 表示的子串
	for (int i = 0; i < s2.length(); i++)
		                                    // 把 s2 中的小写字母变成大写字母
	{
		if (s2.char_at(i) >= 'a' && s2.char_at(i) <= 'z')
			s2.char_at(i) = s2.char_at(i) - 'a' + 'A';
	}
		if (s2.compare("ABCDEFGXYZ") == 0) cout << "OK\n";
	cout << s1.get_str() << endl << s2.get_str() << endl;
	return 0;
}
