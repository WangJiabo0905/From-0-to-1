#include <iostream>
#include <cstdlib>
using namespace std;
class Matrix
	// 矩阵类
{
	int* p_data;
	// 表示矩阵数据，用来存放矩阵元素，然后用一维数组来模拟二维数组
	int row, col;
	// 表示矩阵的行数和列数
public:
	Matrix(int r, int c)
	{
		if (r <= 0 || c <= 0)
		{
			cerr << " 矩阵尺寸不合法！ \n";
			exit(-1);
		}
		row = r; col = c;
		p_data = new int[row * col];
	}
	~Matrix()
	{
		delete[]p_data;
	}
	int& element(int i, int j)//之所以要应用，是为了进行赋值，之所以要有两个重载函数，一个赋值，一个访问。
		// 访问矩阵元素
	{
		if (i < 0 || i >= row || j < 0 || j >= col)
		{
			cerr << " 矩阵下标越界 \n";
			exit(-1);
		}
		return *(p_data + i * col + j);
	}
	int element(int i, int j) const//这里的const是为了让常量对象也能访问矩阵元素，常量对象的值不能被改变。
		// 访问矩阵元素（为常量对象而提供）
	{
		if (i < 0 || i >= row || j < 0 || j >= col)
		{
			cerr << " 矩阵下标越界 \n";
			exit(-1);
		}
		return *(p_data + i * col + j);
	}
	int dimension_row() const
		// 获得矩阵的行数
	{
		return row;
	}
	int dimension_column() const
		// 获得矩阵的列数
	{
		return col;
	}
	void display() const
		// 显示矩阵元素
	{
		int* p = p_data;
		for (int i = 0; i < row; i++)
		{
			for (int j = 0; j < col; j++)
			{
				cout << *p << ' ';
				p++;
			}
			cout << endl;
		}
	}
};
class Vector
	// 向量类
{
	int* p_data;
	int num;
public:
	Vector(int n)
	{
		if (n <= 0)
		{
			cerr << " 向量尺寸不合法！ \n";
			exit(-1);
		}
		num = n;
		p_data = new int[num];
	}
	~Vector()
	{
		delete[]p_data;
	}
	int& element(int i)
		// 访问向量元素
	{
		if (i < 0 || i >= num)
		{
			cerr << " 向量下标越界！ \n";
			exit(-1);
		}
		return p_data[i];
	}
	int element(int i) const
		// 访问向量元素（为常量对象而提供）
	{
		if (i < 0 || i >= num)
		{
			cerr << " 向量下标越界！ \n";
			exit(-1);
		}
		return p_data[i];
	}
	int dimension() const
		// 返回向量的尺寸
	{
		return num;
	}
	void display() const
		// 显示向量元素
	{
		int* p = p_data;
		for (int i = 0; i < num; i++, p++)
			cout << *p << ' ';
		cout << endl;
	}
};
void multiply(const Matrix& m, const Vector& v, Vector& r)// 矩阵与向量相乘，有两个vector
{
	if (m.dimension_column() != v.dimension() || m.dimension_row() !=
		r.dimension())
	{
		cerr << " 矩阵和向量的尺寸不匹配！ \n";
		exit(-1);
	}
	int row = m.dimension_row(), col = m.dimension_column();
	for (int i = 0; i < row; i++)
	{
		r.element(i) = 0;
		for (int j = 0; j < col; j++)
			r.element(i) += m.element(i, j) * v.element(j);
	}
}
int main()
{
	int row, column;
	cout << " 请输入矩阵的行数和列数：";
	cin >> row >> column;
	Matrix m(row, column);
	Vector v(column);
	Vector r(row);
	cout << " 请输入矩阵元素：\n";
	int i, j;
	for (i = 0; i < row; i++)
		for (j = 0; j < column; j++)
			cin >> m.element(i, j);
	cout << " 请输入向量元素：\n";
	for (i = 0; i < column; i++)
		cin >> v.element(i);
	multiply(m, v, r);
	cout << " 矩阵：\n";
		m.display();
	cout << " 与向量：\n";
	v.display();
	cout << " 的乘积为：\n";
	r.display();
	return 0;
}
